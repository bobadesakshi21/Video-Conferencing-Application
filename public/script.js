const socket = io('/')

const videoGrid = document.getElementById('video-grid')

// Establish a peer connection
// First param is the id which will be automatically generated by peer
let peer = new Peer(undefined, {
  path: '/peerjs',
  host: 'localhost',
  port: '3000'
})

const myVideo = document.createElement('video')
myVideo.muted = true

let myVideoStream

// Get stream if user gives the permission
navigator.mediaDevices.getUserMedia({
  video: true,
  audio: true
}).then(stream => {
  myVideoStream = stream
  addVideoStream(myVideo, myVideoStream)
})

// Listen on the peer connection
// This event is triggered when we successfully connect to the peer server
peer.on('open', userId => {
  socket.emit('join-room', ROOM_ID, userId)
})

socket.on('user-connected', (userId) => {
  connectToNewUser(userId, myVideoStream)
})

const addVideoStream = (video, stream) => {
  // Display the video so user can see himself
  video.srcObject = stream
  // When metadata like duration, dimensions etc for the specified audio/video has been loaded.
  video.addEventListener('loadedmetadata', () => {
    video.play()
  })
  // Add this video to the video grid
  videoGrid.append(video)
}

// Other users will call the newly added user and send the stream
const connectToNewUser = (userId, stream) => {
  const call = peer.call(userId, stream)
  const video = document.createElement('video')
  call.on('stream', userVideoStream => {
    addVideoStream(video, userVideoStream)
  })
}

// Newly added user will answer the call and send the stream
peer.on('call', call => {
  call.answer(myVideoStream)
  const video = document.createElement('video')
  call.on('stream', userVideoStream => {
    addVideoStream(video, userVideoStream)
  })
})

let text = $("input")

$('html').keydown(function (e) {
  if (e.which === 13 && text.val().length !== 0) {
    console.log(text.val())
    socket.emit('message', text.val())
    text.val('')
  }
})
socket.on('createMessage', message => {
  $('ul').append(`<li class='message'><b>user</b><br/>${message}</li>`)
})

// Mute unmute
const muteUnmute = () => {
  const enabled = myVideoStream.getAudioTracks()[0].enabled
  if (enabled) {
    myVideoStream.getAudioTracks()[0].enabled = false
    setUnmuteButton()
  } else {
    setMuteButton()
    myVideoStream.getAudioTracks()[0].enabled = true
  }
}
const setMuteButton = () => {
  const html = `
    <i class="fas fa-microphone"></i>
    <span>Mute</span>
  `
  document.querySelector('.main__mute_button').innerHTML = html
}

const setUnmuteButton = () => {
  const html = `
    <i class="unmute fas fa-microphone-slash"></i>
    <span>Unmute</span>
  `
  document.querySelector('.main__mute_button').innerHTML = html
}

const playStopVideo = () => {
  let enabled = myVideoStream.getVideoTracks()[0].enabled
  if (enabled) {
    myVideoStream.getVideoTracks()[0].enabled = false
    setPlayVideo()
  } else {
    myVideoStream.getVideoTracks()[0].enabled = true
    setStopVideo(0)
  }
}

const setStopVideo = () => {
  const html = `
    <i class="fas fa-video"></i>
    <span>Stop Video</span>
  `
  document.querySelector('.main__video_button').innerHTML = html
}

const setPlayVideo = () => {
  const html = `
  <i class="stop fas fa-video-slash"></i>
    <span>Play Video</span>
  `
  document.querySelector('.main__video_button').innerHTML = html
}

const leaveMeeting = () => {
  console.log('Here we are')
  myVideoStream.getVideoTracks()[0].enabled = false
  myVideoStream.getVideoTracks()[0].enabled = false
}
